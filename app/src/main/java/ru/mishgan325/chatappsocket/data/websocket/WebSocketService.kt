package ru.mishgan325.chatappsocket.data.websocket

import android.util.Log
import kotlinx.coroutines.channels.BufferOverflow
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.asSharedFlow
import ru.mishgan325.chatappsocket.data.websocket.model.ChatMessageWs
import ru.mishgan325.chatappsocket.utils.SessionManager
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class WebSocketService @Inject constructor(
    private val webSocketClientFactory: WebSocketClientFactory,
    private val sessionManager: SessionManager
) {
    private val TAG = "WebSocketService"
    private var webSocketClient: WebSocketClient? = null

    private val _incomingMessages = MutableSharedFlow<ChatMessageWs>(
        replay = 0,
        extraBufferCapacity = 1,
        onBufferOverflow = BufferOverflow.DROP_OLDEST
    )
    val incomingMessages = _incomingMessages.asSharedFlow()

    private var isConnected = false // –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    fun connect() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, —Ç–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
        if (isConnected) {
            Log.d(TAG, "Already connected, skipping connection.")
            return
        }

        webSocketClient = webSocketClientFactory.create(sessionManager.getAuthToken().toString()).apply {
            setOnMessageReceivedListener { message ->
                Log.d(TAG, "üí• WebSocketService –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: $message")
                val emitted = _incomingMessages.tryEmit(message)
                Log.d(TAG, "üî• –≠–º–∏—Ç –≤ –ø–æ—Ç–æ–∫: $emitted")
            }

            connect() // –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        }

        // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        isConnected = true
    }

    fun subscribe(chatId: Long) {
        webSocketClient?.subscribe(chatId)
        Log.d(TAG, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —á–∞—Ç $chatId –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    }

    fun unsubscribe(chatId: Long) {
        webSocketClient?.unsubscribe(chatId)
        Log.d(TAG, "–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —á–∞—Ç–∞ $chatId –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    }

    suspend fun sendMessage(content: String, fileUrl: String, chatId: Long) {
        try {
            if (webSocketClient == null) {
                connect()
            }
            webSocketClient?.sendMessage(content, fileUrl, chatId)
        } catch (e: Exception) {
            Log.e(TAG, "Error sending message: ${e.message}")
        }
    }


    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    fun disconnect() {
        webSocketClient?.disconnect()
//        webSocketClient = null
        isConnected = false
        Log.d(TAG, "WebSocket –æ—Ç–∫–ª—é—á—ë–Ω –∏ –æ–±–Ω—É–ª—ë–Ω")
    }
}