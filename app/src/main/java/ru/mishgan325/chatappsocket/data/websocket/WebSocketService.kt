package ru.mishgan325.chatappsocket.data.websocket

import android.util.Log
import kotlinx.coroutines.channels.BufferOverflow
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.asSharedFlow
import ru.mishgan325.chatappsocket.data.websocket.model.ChatMessageWs
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class WebSocketService @Inject constructor(
    private val webSocketClientFactory: WebSocketClientFactory
) {
    private val TAG = "WebSocketService"
    private var webSocketClient: WebSocketClient? = null

    private val _incomingMessages = MutableSharedFlow<ChatMessageWs>(
        replay = 0,
        extraBufferCapacity = 1,
        onBufferOverflow = BufferOverflow.DROP_OLDEST
    )
    val incomingMessages = _incomingMessages.asSharedFlow()

    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    fun connect(jwtToken: String, chatId: Long) {
        webSocketClient = webSocketClientFactory.create(jwtToken, chatId).apply {
            setOnMessageReceivedListener { message ->
                Log.d(TAG, "üí• WebSocketClient –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: $message")
                val emitted = _incomingMessages.tryEmit(message)
                Log.d(TAG, "üî• –≠–º–∏—Ç –≤ –ø–æ—Ç–æ–∫: $emitted")
            }

            connect()
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–¥–µ–ª–∞–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º)
    suspend fun sendMessage(content: String, fileUrl: String, chatId: Long) {
        try {
            webSocketClient?.sendMessage(content, fileUrl, chatId)
        } catch (e: Exception) {
            Log.e(TAG, "Error sending message: ${e.message}")
            // –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        }
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    fun disconnect() {
        webSocketClient?.disconnect()
    }
}
